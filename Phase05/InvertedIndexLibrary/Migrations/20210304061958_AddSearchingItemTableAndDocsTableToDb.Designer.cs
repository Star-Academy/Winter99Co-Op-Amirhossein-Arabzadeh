// <auto-generated />
using InvertedIndexLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvertedIndexLibrary.Migrations
{
    [DbContext(typeof(InvertedIndexContext))]
    [Migration("20210304061958_AddSearchingItemTableAndDocsTableToDb")]
    partial class AddSearchingItemTableAndDocsTableToDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DocSearchItem", b =>
                {
                    b.Property<int>("DocsId")
                        .HasColumnType("int");

                    b.Property<string>("SearchItemsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocsId", "SearchItemsId");

                    b.HasIndex("SearchItemsId");

                    b.ToTable("DocSearchItem");
                });

            modelBuilder.Entity("InvertedIndexLibrary.Doc", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Docs");
                });

            modelBuilder.Entity("InvertedIndexLibrary.SearchItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("SearchingItems");
                });

            modelBuilder.Entity("DocSearchItem", b =>
                {
                    b.HasOne("InvertedIndexLibrary.Doc", null)
                        .WithMany()
                        .HasForeignKey("DocsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvertedIndexLibrary.SearchItem", null)
                        .WithMany()
                        .HasForeignKey("SearchItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
